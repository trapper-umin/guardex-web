// API Functions for VPN Management - Updated 2025-01-16
import axios from "axios";
import type { 
  VpnSubscription, 
  VpnOffer, 
  SellerServer, 
  SellerStats, 
  SellerSubscriber, 
  SalesData, 
  CreateServerForm,
  ServerConnectionData,
  ServerConnectionResult,
  WireGuardDeploymentResult,
  ServerTestingResult,
  VpnServiceConfig,
  PurchaseResponse
} from "../utils/types";

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π axios –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend —á–µ—Ä–µ–∑ API Gateway
const api = axios.create({
  baseURL: "http://localhost:8080/api",
  headers: {
    'Content-Type': 'application/json',
  },
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("authToken");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;
let failedQueue: Array<{
  resolve: (value: any) => void;
  reject: (error: any) => void;
}> = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(({ resolve, reject }) => {
    if (error) {
      reject(error);
    } else {
      resolve(token);
    }
  });
  
  failedQueue = [];
};

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏ —É –Ω–∞—Å –µ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (error.response?.status === 401 && !originalRequest._retry) {
      const refreshToken = localStorage.getItem('refreshToken');
      
      if (refreshToken && !isRefreshing) {
        isRefreshing = true;
        originalRequest._retry = true;

        try {
          console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
          const response = await api.post<LoginResponse>('/auth/refresh', { refreshToken });
          const { token, refreshToken: newRefreshToken, user } = response.data;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
          localStorage.setItem('authToken', token);
          localStorage.setItem('refreshToken', newRefreshToken);
          localStorage.setItem('currentUser', JSON.stringify(user));
          
          console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
          originalRequest.headers['Authorization'] = `Bearer ${token}`;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          processQueue(null, token);
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          return api(originalRequest);
          
        } catch (refreshError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError);
          
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
          localStorage.removeItem('authToken');
          localStorage.removeItem('refreshToken');
          localStorage.removeItem('currentUser');
          
          processQueue(refreshError, null);
          
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
          if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {
            window.location.href = '/login';
          }
          
          return Promise.reject(refreshError);
        } finally {
          isRefreshing = false;
        }
      } else if (refreshToken && isRefreshing) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        }).then(token => {
          originalRequest.headers['Authorization'] = `Bearer ${token}`;
          return api(originalRequest);
        }).catch(err => {
          return Promise.reject(err);
        });
      } else {
        // –ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        localStorage.removeItem('authToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('currentUser');
        
        if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {
          window.location.href = '/login';
        }
      }
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.response?.data) {
      const errorData = error.response.data;
      if (errorData.message) {
        throw new Error(errorData.message);
      }
      if (errorData.error) {
        throw new Error(errorData.error);
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    if (error.code === 'NETWORK_ERROR' || !error.response) {
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
    switch (error.response?.status) {
      case 401:
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      case 409:
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      case 500:
        throw new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      default:
        throw new Error(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
);

export default api;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π axios –∏–Ω—Å—Ç–∞–Ω—Å)
async function authenticatedFetch(url: string, options: RequestInit = {}): Promise<Response> {
  const method = options.method || 'GET';
  const body = options.body;
  
  try {
    const response = await api({
      url: url,
      method: method as any,
      data: body ? JSON.parse(body as string) : undefined,
      headers: options.headers as any,
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Response –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return new Response(JSON.stringify(response.data), {
      status: response.status,
      statusText: response.statusText,
      headers: response.headers as any,
    });
  } catch (error: any) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ axios
    if (error.response) {
      return new Response(JSON.stringify(error.response.data), {
        status: error.response.status,
        statusText: error.response.statusText,
        headers: error.response.headers,
      });
    }
    throw error;
  }
}

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface SubscriptionStatus {
  isActive: boolean;
  daysLeft: number;
  expiresAt: string;
  subscriptions: VpnSubscription[];
}

// –¢–∏–ø—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç backend)
export interface UserProfile {
  id: number;
  email: string;
  createdAt: string;
  isActive: boolean;
  role: 'USER' | 'SELLER' | 'ADMIN';
}

export interface LoginResponse {
  token: string;
  type: string;
  refreshToken: string;
  user: UserProfile;
}

export interface RegisterRequest {
  email: string;
  password: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface ErrorResponse {
  error: string;
  message: string;
  statusCode: number;
  timestamp: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface BecomeSellerRequest {
  isSelfEmployed: boolean;
  businessName?: string;
  businessDescription?: string;
}

export interface SessionResponse {
  id: number;
  deviceInfo: string;
  ipAddress: string;
  createdAt: string;
  expiresAt: string;
  active: boolean;
  current: boolean;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è VPN –ø–æ–¥–ø–∏—Å–æ–∫
const mockSubscriptions: VpnSubscription[] = [
  {
    id: '1',
    name: 'Premium Germany VPN',
    country: 'Germany',
    countryCode: 'DE',
    flag: 'üá©üá™',
    server: 'Berlin-Premium-01',
    isActive: true,
    daysLeft: 25,
    expiresAt: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '1 Gb/s',
    ping: 25,
    load: 35,
    plan: 'premium',
    price: 9.99,
    currency: 'USD'
  },
  {
    id: '2', 
    name: 'Basic USA VPN',
    country: 'United States',
    countryCode: 'US', 
    flag: 'üá∫üá∏',
    server: 'NewYork-Basic-03',
    isActive: true,
    daysLeft: 12,
    expiresAt: new Date(Date.now() + 12 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '500 Mb/s',
    ping: 45,
    load: 68,
    plan: 'basic',
    price: 4.99,
    currency: 'USD'
  },
  {
    id: '3',
    name: 'Enterprise Japan VPN',
    country: 'Japan',
    countryCode: 'JP',
    flag: 'üáØüáµ',
    server: 'Tokyo-Enterprise-01',
    isActive: true,
    daysLeft: 3,
    expiresAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '2 Gb/s',
    ping: 15,
    load: 22,
    plan: 'enterprise',
    price: 19.99,
    currency: 'USD'
  },
  {
    id: '4',
    name: 'Premium UK VPN',
    country: 'United Kingdom',
    countryCode: 'GB',
    flag: 'üá¨üáß',
    server: 'London-Premium-02',
    isActive: false,
    daysLeft: 0,
    expiresAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '1 Gb/s',
    ping: 30,
    load: 45,
    plan: 'premium',
    price: 9.99,
    currency: 'USD'
  },
  {
    id: '5',
    name: 'Basic Netherlands VPN',
    country: 'Netherlands',
    countryCode: 'NL',
    flag: 'üá≥üá±',
    server: 'Amsterdam-Basic-01',
    isActive: true,
    daysLeft: 18,
    expiresAt: new Date(Date.now() + 18 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '300 Mb/s',
    ping: 20,
    load: 52,
    plan: 'basic',
    price: 4.99,
    currency: 'USD'
  }
];

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
export async function register(email: string, password: string): Promise<LoginResponse> {
  const requestData: RegisterRequest = { email, password };
  
  try {
    const response = await api.post<LoginResponse>('/auth/register', requestData);
    const { token, refreshToken, user } = response.data;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('authToken', token);
    localStorage.setItem('refreshToken', refreshToken);
    localStorage.setItem('currentUser', JSON.stringify(user));
    
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', user);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
export async function login(email: string, password: string): Promise<LoginResponse> {
  const requestData: LoginRequest = { email, password };
  
  try {
    const response = await api.post<LoginResponse>('/auth/login', requestData);
    const { token, refreshToken, user } = response.data;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('authToken', token);
    localStorage.setItem('refreshToken', refreshToken);
    localStorage.setItem('currentUser', JSON.stringify(user));
    
    console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', user);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getProfile(): Promise<UserProfile> {
  try {
    const response = await api.get<UserProfile>('/auth/profile');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('currentUser', JSON.stringify(response.data));
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (error instanceof Error && error.message.includes('401')) {
      localStorage.removeItem('authToken');
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('currentUser');
    }
    
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export async function refreshToken(): Promise<LoginResponse> {
  const refreshTokenValue = localStorage.getItem('refreshToken');
  
  if (!refreshTokenValue) {
    throw new Error('Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  try {
    const response = await api.post<LoginResponse>('/auth/refresh', { 
      refreshToken: refreshTokenValue 
    });
    const { token, refreshToken: newRefreshToken, user } = response.data;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    localStorage.setItem('authToken', token);
    localStorage.setItem('refreshToken', newRefreshToken);
    localStorage.setItem('currentUser', JSON.stringify(user));
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('currentUser');
    
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export async function logout(): Promise<void> {
  const refreshTokenValue = localStorage.getItem('refreshToken');
  
  try {
    if (refreshTokenValue) {
      await api.post('/auth/logout', { refreshToken: refreshTokenValue });
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã—Ö–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
  } finally {
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('currentUser');
    
    console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export async function logoutAll(): Promise<void> {
  try {
    await api.post('/auth/logout-all');
    console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    throw error;
  } finally {
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('currentUser');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
export async function getActiveSessions(): Promise<SessionResponse[]> {
  try {
    const response = await api.get<SessionResponse[]>('/auth/sessions');
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
export async function revokeSession(sessionId: number): Promise<void> {
  try {
    await api.delete(`/auth/sessions/${sessionId}`);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞:', sessionId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
export async function deleteAccount(): Promise<void> {
  try {
    await api.delete('/auth/account');
    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    throw error;
  } finally {
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('currentUser');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getSubscriptionStatus(): Promise<SubscriptionStatus> {
  const response = await authenticatedFetch('/vpn/user/subscription-status');
  
  if (!response.ok) {
    throw new Error('Failed to fetch subscription status');
  }
  
  return await response.json();
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export async function getVpnConfig(): Promise<Blob> {
  await new Promise((resolve) => setTimeout(resolve, 700));
  
  // –°–æ–∑–¥–∞–µ–º mock —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const configContent = `# VPN config mock
# –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# –†–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º

[Interface]
PrivateKey = mock_private_key_${Date.now()}
Address = 10.0.0.2/24

[Peer]
PublicKey = mock_server_public_key_here
Endpoint = vpn.example.com:51820
AllowedIPs = 0.0.0.0/0

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

  return new Blob([configContent], { type: 'text/plain' });
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export async function regenerateVpnConfig(): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1200));
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
export async function mockPurchaseSubscription(months: number): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1000));
  
  console.log(`–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${months} –º–µ—Å.`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  const savedSubscription = localStorage.getItem('mockSubscription');
  let startDate = new Date();
  
  if (savedSubscription) {
    const currentSubscription = JSON.parse(savedSubscription);
    const currentExpiresAt = new Date(currentSubscription.expiresAt);
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, —Ç–æ –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const now = new Date();
    if (currentExpiresAt > now) {
      startDate = currentExpiresAt; // –î–æ–±–∞–≤–ª—è–µ–º –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    }
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Ç–æ startDate –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const newExpiresAt = new Date(startDate);
  newExpiresAt.setMonth(newExpiresAt.getMonth() + months);
  
  const subscription = {
    expiresAt: newExpiresAt.toISOString().split('T')[0], // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    purchasedAt: new Date().toISOString(),
    months,
  };
  
  localStorage.setItem('mockSubscription', JSON.stringify(subscription));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserSubscriptions(): Promise<VpnSubscription[]> {
  const response = await authenticatedFetch('/vpn/user/subscriptions');
  
  if (!response.ok) {
    throw new Error('Failed to fetch user subscriptions');
  }
  
  return await response.json();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function getVpnConfigForSubscription(subscriptionId: string): Promise<Blob> {
  const response = await authenticatedFetch(`/vpn/user/subscriptions/${subscriptionId}/config`);
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || 'Failed to fetch VPN config');
  }
  
  const configContent = await response.text();
  return new Blob([configContent], { type: 'text/plain' });
}

// –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function regenerateVpnConfigForSubscription(subscriptionId: string): Promise<void> {
  const response = await authenticatedFetch(`/vpn/user/subscriptions/${subscriptionId}/regenerate`, {
    method: 'POST',
  });
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || 'Failed to regenerate VPN config');
  }
}

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function extendSubscription(subscriptionId: string, months: number): Promise<void> {
  const response = await authenticatedFetch(`/vpn/user/subscriptions/${subscriptionId}/extend?months=${months}`, {
    method: 'POST',
  });
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || 'Failed to extend subscription');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ 
export async function getVpnOffers(): Promise<VpnOffer[]> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é getMarketplacePlans –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  return await getMarketplacePlans();
}

// –ü–æ–∫—É–ø–∫–∞ VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export async function purchaseVpnOffer(
  offerId: string, 
  plan: 'monthly' | 'yearly' = 'monthly'
): Promise<PurchaseResponse> {
  const response = await authenticatedFetch(`/vpn/marketplace/plans/${offerId}/purchase`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ billingCycle: plan }),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏');
  }

  return await response.json();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
export async function getSellerStats(): Promise<SellerStats> {
  const response = await authenticatedFetch('/vpn/seller/stats', {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞');
  }

  const data = await response.json();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigDecimal –∑–Ω–∞—á–µ–Ω–∏—è –≤ number –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  return {
    ...data,
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0),
    averageRating: Number(data.averageRating || 0),
    conversionRate: Number(data.conversionRate || 0),
    churnRate: Number(data.churnRate || 0)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
export async function getSellerServers(): Promise<SellerServer[]> {
  const response = await authenticatedFetch('/vpn/seller/servers', {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return data.map((server: any) => ({
    ...server,
    totalRevenue: Number(server.totalRevenue || 0),
    monthlyRevenue: Number(server.monthlyRevenue || 0),
    uptime: Number(server.uptime || 0)
  }));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
export async function getSellerSubscribers(): Promise<SellerSubscriber[]> {
  const response = await authenticatedFetch('/vpn/seller/subscribers', {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
  }

  const data = await response.json();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return data.map((subscriber: any) => ({
    ...subscriber,
    totalPaid: Number(subscriber.totalPaid || 0)
  }));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
export async function getSalesData(days: number = 30): Promise<SalesData[]> {
  const response = await authenticatedFetch(`/vpn/seller/sales?days=${days}`, {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö');
  }

  const data = await response.json();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return data.map((record: any) => ({
    ...record,
    revenue: Number(record.revenue || 0)
  }));
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
export async function createServer(serverData: CreateServerForm): Promise<SellerServer> {
  const response = await authenticatedFetch('/vpn/seller/servers', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(serverData),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0),
    uptime: Number(data.uptime || 0),
    flag: getFlagByCountryCode(data.countryCode)
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
export async function updateServer(serverId: string, updates: Partial<SellerServer>): Promise<SellerServer> {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º updates –≤ —Ñ–æ—Ä–º–∞—Ç CreateServerRequest
  const updateData = {
    name: updates.name,
    country: updates.country,
    countryCode: updates.countryCode,
    city: updates.city,
    maxConnections: updates.maxConnections,
    bandwidth: updates.bandwidth,
    speed: updates.speed,
    description: updates.description,
    features: updates.features
  };

  const response = await authenticatedFetch(`/vpn/seller/servers/${serverId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updateData),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0),
    uptime: Number(data.uptime || 0),
    flag: getFlagByCountryCode(data.countryCode)
  };
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
export async function deleteServer(serverId: string): Promise<void> {
  const response = await authenticatedFetch(`/vpn/seller/servers/${serverId}`, {
    method: 'DELETE',
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
export async function toggleServerStatus(serverId: string): Promise<SellerServer> {
  const response = await authenticatedFetch(`/vpn/seller/servers/${serverId}/toggle`, {
    method: 'PATCH',
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0),
    uptime: Number(data.uptime || 0)
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã
function getFlagByCountryCode(countryCode: string): string {
  const flags: Record<string, string> = {
    'US': 'üá∫üá∏', 'DE': 'üá©üá™', 'GB': 'üá¨üáß', 'JP': 'üáØüáµ', 'CA': 'üá®üá¶',
    'FR': 'üá´üá∑', 'NL': 'üá≥üá±', 'CH': 'üá®üá≠', 'SG': 'üá∏üá¨', 'AU': 'üá¶üá∫',
    'SE': 'üá∏üá™', 'NO': 'üá≥üá¥', 'DK': 'üá©üá∞', 'FI': 'üá´üáÆ', 'IT': 'üáÆüáπ',
    'ES': 'üá™üá∏', 'BR': 'üáßüá∑', 'IN': 'üáÆüá≥', 'KR': 'üá∞üá∑', 'HK': 'üá≠üá∞'
  };
  
  return flags[countryCode] || 'üè≥Ô∏è';
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
export async function checkServerConnection(connectionData: ServerConnectionData): Promise<ServerConnectionResult> {
  try {
    const response = await authenticatedFetch('/vpn/seller/servers/test-connection', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ip: connectionData.ip,
        rootPassword: connectionData.rootPassword
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }

    const data = await response.json();
    return data;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏'
    };
  }
}

// –®–∞–≥ 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ WireGuard (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
export async function deployWireGuardWithProgress(
  serverIp: string, 
  onProgress: (result: WireGuardDeploymentResult) => void
): Promise<WireGuardDeploymentResult> {
  const steps = [
    { id: 'env', name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è', status: 'pending' as const, details: '', logs: [] },
    { id: 'scripts', name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤', status: 'pending' as const, details: '', logs: [] },
    { id: 'install', name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard', status: 'pending' as const, details: '', logs: [] },
    { id: 'config', name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', status: 'pending' as const, details: '', logs: [] }
  ];
  
  const result = { success: true, steps: [...steps] };
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
  const stepDetails = {
    'env': {
      logs: [
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...',
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ root...',
        '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...',
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...'
      ],
      finalDetails: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ'
    },
    'scripts': {
      logs: [
        '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ WireGuard...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ —Å–∫—Ä–∏–ø—Ç–∞...',
        '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...',
        '–°–∫—Ä–∏–ø—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é'
      ],
      finalDetails: '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'
    },
    'install': {
      logs: [
        '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ wireguard-tools...',
        '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ Linux...',
        '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ wireguard-dkms...',
        '–ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π —è–¥—Ä–∞...',
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–±—ã WireGuard...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...'
      ],
      finalDetails: 'WireGuard —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ'
    },
    'config': {
      logs: [
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞...',
        '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...',
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...',
        '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–µ—Ä–≤–æ–ª–∞...',
        '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...',
        '–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã WireGuard...'
      ],
      finalDetails: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
    }
  };
  
     // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
   for (let i = 0; i < steps.length; i++) {
     const stepId = steps[i].id;
     const stepLogs = stepDetails[stepId as keyof typeof stepDetails].logs;
     
     result.steps[i].status = 'running';
     result.steps[i].details = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...';
     onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI
     
     // –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏
     for (let logIndex = 0; logIndex < stepLogs.length; logIndex++) {
       await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 400));
       result.steps[i].logs = stepLogs.slice(0, logIndex + 1);
       onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –∫–∞–∂–¥–æ–º –ª–æ–≥–µ
       
       // –ú–æ–∫–∏ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
       // if (Math.random() < 0.05) {
       //   result.steps[i].status = 'error';
       //   result.steps[i].error = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${stepLogs[logIndex]}`;
       //   result.success = false;
       //   result.error = `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥: ${steps[i].name}`;
       //   onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
       //   return result;
       // }
     }
     
         await new Promise(resolve => setTimeout(resolve, 500));
    result.steps[i].status = 'completed';
    result.steps[i].details = stepDetails[stepId as keyof typeof stepDetails].finalDetails;
    onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞
  }
  
  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ API –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  try {
    const realResult = await deployWireGuard(serverIp);
    if (realResult.success) {
      return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–∏—Ç–∞—Ü–∏–∏ —Å —É—Å–ø–µ—Ö–æ–º
    } else {
      // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      result.success = false;
      result.error = realResult.error;
      return result;
    }
  } catch (error) {
    result.success = false;
    result.error = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ WireGuard';
    return result;
  }
}

// –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
export async function testServerReadinessWithProgress(
  serverIp: string,
  onProgress: (result: ServerTestingResult) => void
): Promise<ServerTestingResult> {
  const tests = [
    { id: 'ping', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞', status: 'pending' as const, details: '', logs: [] },
    { id: 'wireguard', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ WireGuard', status: 'pending' as const, details: '', logs: [] },
    { id: 'ports', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤', status: 'pending' as const, details: '', logs: [] },
    { id: 'config', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', status: 'pending' as const, details: '', logs: [] }
  ];
  
  const result = { 
    success: true, 
    tests: [...tests],
    overallStatus: 'running' as const
  };
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  const testDetails = {
    'ping': {
      logs: [
        '–û—Ç–ø—Ä–∞–≤–∫–∞ ICMP –ø–∞–∫–µ—Ç–æ–≤...',
        '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤...'
      ],
      successDetails: '–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 15ms, –ø–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤ 0%',
      runningDetails: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...'
    },
    'wireguard': {
      logs: [
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã WireGuard...',
        '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...',
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...'
      ],
      successDetails: 'WireGuard —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å wg0 –∞–∫—Ç–∏–≤–µ–Ω',
      runningDetails: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WireGuard...'
    },
    'ports': {
      logs: [
        '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ 51820/UDP...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Ñ–∞–µ—Ä–≤–æ–ª–∞...',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...',
        '–ê–Ω–∞–ª–∏–∑ NAT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...'
      ],
      successDetails: '–ü–æ—Ä—Ç 51820/UDP –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ',
      runningDetails: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤...'
    },
    'config': {
      logs: [
        '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π...',
        '–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏...',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...'
      ],
      successDetails: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
      runningDetails: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...'
    }
  };
  
     // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
   for (let i = 0; i < tests.length; i++) {
     const testId = tests[i].id;
     const testInfo = testDetails[testId as keyof typeof testDetails];
     
     result.tests[i].status = 'running';
     result.tests[i].details = testInfo.runningDetails;
     onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI
     
     // –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏
     for (let logIndex = 0; logIndex < testInfo.logs.length; logIndex++) {
       await new Promise(resolve => setTimeout(resolve, 600 + Math.random() * 400));
       result.tests[i].logs = testInfo.logs.slice(0, logIndex + 1);
       onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –∫–∞–∂–¥–æ–º –ª–æ–≥–µ
       
       // –ú–æ–∫–∏ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
       // if (Math.random() < 0.08) {
       //   result.tests[i].status = 'failed';
       //   result.tests[i].error = getTestError(tests[i].id);
       //   result.tests[i].details = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${testInfo.logs[logIndex]}`;
       //   result.success = false;
       //   result.overallStatus = 'failed';
       //   onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
       //   return result;
       // }
     }
     
     await new Promise(resolve => setTimeout(resolve, 300));
     result.tests[i].status = 'passed';
     result.tests[i].details = testInfo.successDetails;
     onProgress({ ...result }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
   }
  
  if (result.success) {
    result.overallStatus = 'passed';
  }
  
  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  try {
    const realResult = await testServerReadiness(serverIp);
    if (realResult.success) {
      return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–∏—Ç–∞—Ü–∏–∏ —Å —É—Å–ø–µ—Ö–æ–º
    } else {
      // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      result.success = false;
      result.overallStatus = 'failed';
      return result;
    }
  } catch (error) {
    result.success = false;
    result.overallStatus = 'failed';
    return result;
  }
}

// –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ WireGuard –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
export async function deployWireGuard(serverIp: string): Promise<WireGuardDeploymentResult> {
  try {
    const response = await authenticatedFetch(`/vpn/seller/servers/deploy-wireguard?serverIp=${encodeURIComponent(serverIp)}`, {
      method: 'POST',
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ WireGuard');
    }

    const data = await response.json();
    return data;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ WireGuard:', error);
    return {
      success: false,
      steps: [],
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏'
    };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
export async function testServerReadiness(serverIp: string): Promise<ServerTestingResult> {
  try {
    const response = await authenticatedFetch(`/vpn/seller/servers/test-readiness?serverIp=${encodeURIComponent(serverIp)}`, {
      method: 'POST',
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    const data = await response.json();
    return data;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return {
      success: false,
      tests: [],
      overallStatus: 'failed'
    };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ VPN-—Å–µ—Ä–≤–∏—Å–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ API —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)
export async function createVpnService(config: VpnServiceConfig, serverIp: string): Promise<SellerServer> {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º VpnServiceConfig –≤ CreateServerForm –¥–ª—è API
  const serverData = {
    name: config.name,
    country: config.country,
    countryCode: config.countryCode,
    city: config.city,
    maxConnections: config.maxConnections,
    bandwidth: config.bandwidth,
    speed: config.speed,
    description: config.description || '',
    features: config.features || []
  };

  // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  return await createServer(serverData);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function getTestError(testId: string): string {
  const errors: Record<string, string> = {
    'ping': '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
    'wireguard': 'WireGuard –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.',
    'ports': '–ü–æ—Ä—Ç 51820 –∑–∞–∫—Ä—ã—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ.',
    'config': '–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
  };
  return errors[testId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
}

function getTestDetails(testId: string): string {
  const details: Record<string, string> = {
    'ping': '–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 15ms',
    'wireguard': 'WireGuard —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    'ports': '–ü–æ—Ä—Ç 51820/UDP –æ—Ç–∫—Ä—ã—Ç',
    'config': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞'
  };
  return details[testId] || '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
export async function becomeSeller(request: BecomeSellerRequest): Promise<UserProfile> {
  try {
    const response = await api.post<UserProfile>('/auth/become-seller', request);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('currentUser', JSON.stringify(response.data));
    
    console.log('‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:', error);
    throw error;
  }
}

// ==================== –ü–õ–ê–ù–´ –ü–û–î–ü–ò–°–ö–ò ====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
export async function getSellerPlans(): Promise<SubscriptionPlan[]> {
  const response = await authenticatedFetch('/vpn/seller/plans', {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return data.map((plan: any) => ({
    ...plan,
    monthlyPrice: Number(plan.monthlyPrice || 0),
    yearlyPrice: Number(plan.yearlyPrice || 0),
    totalRevenue: Number(plan.totalRevenue || 0),
    monthlyRevenue: Number(plan.monthlyRevenue || 0)
  }));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
export async function getServerPlans(serverId: string): Promise<SubscriptionPlan[]> {
  const response = await authenticatedFetch(`/vpn/seller/servers/${serverId}/plans`, {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return data.map((plan: any) => ({
    ...plan,
    monthlyPrice: Number(plan.monthlyPrice || 0),
    yearlyPrice: Number(plan.yearlyPrice || 0),
    totalRevenue: Number(plan.totalRevenue || 0),
    monthlyRevenue: Number(plan.monthlyRevenue || 0)
  }));
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export async function createSubscriptionPlan(serverId: string, planData: CreateSubscriptionPlanForm): Promise<SubscriptionPlan> {
  const response = await authenticatedFetch(`/vpn/seller/servers/${serverId}/plans`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(planData),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    monthlyPrice: Number(data.monthlyPrice || 0),
    yearlyPrice: Number(data.yearlyPrice || 0),
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0)
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export async function updateSubscriptionPlan(planId: string, planData: CreateSubscriptionPlanForm): Promise<SubscriptionPlan> {
  const response = await authenticatedFetch(`/vpn/seller/plans/${planId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(planData),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    monthlyPrice: Number(data.monthlyPrice || 0),
    yearlyPrice: Number(data.yearlyPrice || 0),
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0)
  };
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∞
export async function togglePlanStatus(planId: string): Promise<SubscriptionPlan> {
  const response = await authenticatedFetch(`/vpn/seller/plans/${planId}/toggle`, {
    method: 'PATCH',
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  return {
    ...data,
    monthlyPrice: Number(data.monthlyPrice || 0),
    yearlyPrice: Number(data.yearlyPrice || 0),
    totalRevenue: Number(data.totalRevenue || 0),
    monthlyRevenue: Number(data.monthlyRevenue || 0)
  };
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export async function deleteSubscriptionPlan(planId: string): Promise<void> {
  const response = await authenticatedFetch(`/vpn/seller/plans/${planId}`, {
    method: 'DELETE',
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
export async function getMarketplacePlans(): Promise<VpnOffer[]> {
  const response = await authenticatedFetch('/vpn/marketplace/plans', {
    method: 'GET',
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞');
  }

  const data = await response.json();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç VpnOffer –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  return data.map((plan: any) => ({
    // –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
    planId: plan.id,
    planName: plan.name,
    planType: plan.type,
    monthlyPrice: Number(plan.monthlyPrice || 0),
    yearlyPrice: Number(plan.yearlyPrice || 0),
    maxConnections: plan.maxConnections,
    bandwidthLimit: plan.bandwidthLimit,
    speedLimit: plan.speedLimit,
    features: plan.features || [],
    isPopular: plan.isPopular,
    description: plan.description,
    
    // –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    serverId: plan.serverId,
    serverName: plan.serverName,
    country: plan.serverCountry,
    countryCode: plan.serverCountryCode || 'US',
    flag: plan.serverFlag,
    city: plan.serverCity,
    ping: 15, // –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    uptime: 99.9, // –ó–∞–≥–ª—É—à–∫–∞
    isOnline: true, // –ó–∞–≥–ª—É—à–∫–∞
    bandwidth: plan.bandwidthLimit || '–ë–µ–∑–ª–∏–º–∏—Ç',
    speed: plan.speedLimit || '1 –ì–±–∏—Ç/—Å',
    protocols: ['WireGuard', 'OpenVPN'], // –ó–∞–≥–ª—É—à–∫–∞
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalSubscribers: plan.totalSubscribers || 0,
    activeSubscribers: plan.activeSubscribers || 0,
    rating: 4.5, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    reviewsCount: plan.totalSubscribers || 0,
    sellerName: 'VPN Seller', // –ó–∞–≥–ª—É—à–∫–∞
    
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    id: plan.id,
    name: plan.name,
    server: plan.serverName,
    plan: plan.type,
    simultaneousConnections: plan.maxConnections,
    logPolicy: 'no-logs' as const
  }));
} 