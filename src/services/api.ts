import axios from "axios";
import type { VpnSubscription, VpnOffer } from "../utils/types";

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π axios –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend
const api = axios.create({
  baseURL: "/api",
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface SubscriptionStatus {
  isActive: boolean;
  daysLeft: number;
  expiresAt: string;
  subscriptions: VpnSubscription[];
}

export interface UserProfile {
  email: string;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è VPN –ø–æ–¥–ø–∏—Å–æ–∫
const mockSubscriptions: VpnSubscription[] = [
  {
    id: '1',
    name: 'Premium Germany VPN',
    country: 'Germany',
    countryCode: 'DE',
    flag: 'üá©üá™',
    server: 'Berlin-Premium-01',
    isActive: true,
    daysLeft: 25,
    expiresAt: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '1 Gb/s',
    ping: 25,
    load: 35,
    plan: 'premium',
    price: 9.99,
    currency: 'USD'
  },
  {
    id: '2', 
    name: 'Basic USA VPN',
    country: 'United States',
    countryCode: 'US', 
    flag: 'üá∫üá∏',
    server: 'NewYork-Basic-03',
    isActive: true,
    daysLeft: 12,
    expiresAt: new Date(Date.now() + 12 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '500 Mb/s',
    ping: 45,
    load: 68,
    plan: 'basic',
    price: 4.99,
    currency: 'USD'
  },
  {
    id: '3',
    name: 'Enterprise Japan VPN',
    country: 'Japan',
    countryCode: 'JP',
    flag: 'üáØüáµ',
    server: 'Tokyo-Enterprise-01',
    isActive: true,
    daysLeft: 3,
    expiresAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '2 Gb/s',
    ping: 15,
    load: 22,
    plan: 'enterprise',
    price: 19.99,
    currency: 'USD'
  },
  {
    id: '4',
    name: 'Premium UK VPN',
    country: 'United Kingdom',
    countryCode: 'GB',
    flag: 'üá¨üáß',
    server: 'London-Premium-02',
    isActive: false,
    daysLeft: 0,
    expiresAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '1 Gb/s',
    ping: 30,
    load: 45,
    plan: 'premium',
    price: 9.99,
    currency: 'USD'
  },
  {
    id: '5',
    name: 'Basic Netherlands VPN',
    country: 'Netherlands',
    countryCode: 'NL',
    flag: 'üá≥üá±',
    server: 'Amsterdam-Basic-01',
    isActive: true,
    daysLeft: 18,
    expiresAt: new Date(Date.now() + 18 * 24 * 60 * 60 * 1000).toISOString(),
    speed: '300 Mb/s',
    ping: 20,
    load: 52,
    plan: 'basic',
    price: 4.99,
    currency: 'USD'
  }
];

// Mock-—Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export async function register(email: string, password: string): Promise<void> {
  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  await new Promise((resolve) => setTimeout(resolve, 800));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å backend)
  const users = JSON.parse(localStorage.getItem('mockUsers') || '[]');
  const existingUser = users.find((user: any) => user.email === email);
  
  if (existingUser) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  users.push({ email, password });
  localStorage.setItem('mockUsers', JSON.stringify(users));
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
export async function login(email: string, password: string): Promise<string> {
  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  await new Promise((resolve) => setTimeout(resolve, 600));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const users = JSON.parse(localStorage.getItem('mockUsers') || '[]');
  const user = users.find((u: any) => u.email === email && u.password === password);
  
  if (!user) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock-—Ç–æ–∫–µ–Ω
  const mockToken = `mock_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  localStorage.setItem('token', mockToken);
  localStorage.setItem('currentUserEmail', email);
  
  return mockToken;
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
export async function getProfile(): Promise<UserProfile> {
  await new Promise((resolve) => setTimeout(resolve, 300));
  
  const email = localStorage.getItem('currentUserEmail');
  if (!email) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }
  
  return { email };
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export async function getSubscriptionStatus(): Promise<SubscriptionStatus> {
  await new Promise((resolve) => setTimeout(resolve, 500));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  const savedSubscription = localStorage.getItem('mockSubscription');
  if (savedSubscription) {
    const subscription = JSON.parse(savedSubscription);
    const now = new Date();
    const expiresAt = new Date(subscription.expiresAt);
    const daysLeft = Math.max(0, Math.ceil((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));
    
    return {
      isActive: daysLeft > 0,
      daysLeft,
      expiresAt: subscription.expiresAt,
      subscriptions: mockSubscriptions, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    };
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  return {
    isActive: true,
    daysLeft: 27,
    expiresAt: "2025-07-01",
    subscriptions: mockSubscriptions, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  };
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export async function getVpnConfig(): Promise<Blob> {
  await new Promise((resolve) => setTimeout(resolve, 700));
  
  // –°–æ–∑–¥–∞–µ–º mock —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const configContent = `# VPN config mock
# –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# –†–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º

[Interface]
PrivateKey = mock_private_key_${Date.now()}
Address = 10.0.0.2/24

[Peer]
PublicKey = mock_server_public_key_here
Endpoint = vpn.example.com:51820
AllowedIPs = 0.0.0.0/0

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

  return new Blob([configContent], { type: 'text/plain' });
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export async function regenerateVpnConfig(): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1200));
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
export async function mockPurchaseSubscription(months: number): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1000));
  
  console.log(`–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${months} –º–µ—Å.`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  const savedSubscription = localStorage.getItem('mockSubscription');
  let startDate = new Date();
  
  if (savedSubscription) {
    const currentSubscription = JSON.parse(savedSubscription);
    const currentExpiresAt = new Date(currentSubscription.expiresAt);
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, —Ç–æ –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const now = new Date();
    if (currentExpiresAt > now) {
      startDate = currentExpiresAt; // –î–æ–±–∞–≤–ª—è–µ–º –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    }
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Ç–æ startDate –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const newExpiresAt = new Date(startDate);
  newExpiresAt.setMonth(newExpiresAt.getMonth() + months);
  
  const subscription = {
    expiresAt: newExpiresAt.toISOString().split('T')[0], // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    purchasedAt: new Date().toISOString(),
    months,
  };
  
  localStorage.setItem('mockSubscription', JSON.stringify(subscription));
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserSubscriptions(): Promise<VpnSubscription[]> {
  await new Promise((resolve) => setTimeout(resolve, 500));
  return mockSubscriptions;
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function getVpnConfigForSubscription(subscriptionId: string): Promise<Blob> {
  await new Promise((resolve) => setTimeout(resolve, 700));
  
  const subscription = mockSubscriptions.find(sub => sub.id === subscriptionId);
  if (!subscription) {
    throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (!subscription.isActive) {
    throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞');
  }
  
  // –°–æ–∑–¥–∞–µ–º mock —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  const configContent = `# VPN config for ${subscription.name}
# Server: ${subscription.server}
# Country: ${subscription.country}
# Speed: ${subscription.speed}

[Interface]
PrivateKey = mock_private_key_${subscriptionId}_${Date.now()}
Address = 10.0.0.2/24

[Peer]
PublicKey = mock_server_public_key_${subscriptionId}
Endpoint = ${subscription.server.toLowerCase().replace(/[^a-z0-9]/g, '-')}.vpn.example.com:51820
AllowedIPs = 0.0.0.0/0

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}
# –ü–æ–¥–ø–∏—Å–∫–∞: ${subscription.name}`;

  return new Blob([configContent], { type: 'text/plain' });
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function regenerateVpnConfigForSubscription(subscriptionId: string): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1200));
  
  const subscription = mockSubscriptions.find(sub => sub.id === subscriptionId);
  if (!subscription) {
    throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (!subscription.isActive) {
    throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞');
  }
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
  console.log(`–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${subscription.name}`);
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function extendSubscription(subscriptionId: string, months: number): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 1000));
  
  const subscription = mockSubscriptions.find(sub => sub.id === subscriptionId);
  if (!subscription) {
    throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const currentDate = subscription.isActive ? new Date(subscription.expiresAt) : new Date();
  currentDate.setMonth(currentDate.getMonth() + months);
  
  subscription.expiresAt = currentDate.toISOString();
  subscription.daysLeft = Math.ceil((currentDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
  subscription.isActive = true;
  
  console.log(`–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.name} –Ω–∞ ${months} –º–µ—Å.`);
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
const mockVpnOffers: VpnOffer[] = [
  {
    id: '1',
    name: 'SuperSpeed USA',
    country: '–°–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã',
    countryCode: 'US',
    flag: 'üá∫üá∏',
    server: 'New York, NY',
    plan: 'premium',
    speed: '1 –ì–±–∏—Ç/—Å',
    ping: 15,
    monthlyPrice: 12,
    yearlyPrice: 120,
    features: ['Netflix –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–¢–æ—Ä—Ä–µ–Ω—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω', 'P2P –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
    rating: 4.8,
    reviewsCount: 342,
    sellerName: 'TechVPN Solutions',
    uptime: 99.9,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 5
  },
  {
    id: '2',
    name: 'Euro Fast VPN',
    country: '–ì–µ—Ä–º–∞–Ω–∏—è',
    countryCode: 'DE',
    flag: 'üá©üá™',
    server: 'Frankfurt, DE',
    plan: 'premium',
    speed: '800 –ú–±–∏—Ç/—Å',
    ping: 8,
    monthlyPrice: 10,
    yearlyPrice: 100,
    features: ['GDPR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–í—ã—Å–æ–∫–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', '–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
    rating: 4.9,
    reviewsCount: 128,
    sellerName: 'EuroNet Services',
    uptime: 99.8,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN', 'IKEv2'],
    logPolicy: 'no-logs',
    simultaneousConnections: 10
  },
  {
    id: '3',
    name: 'AsiaSpeed Pro',
    country: '–Ø–ø–æ–Ω–∏—è',
    countryCode: 'JP',
    flag: 'üáØüáµ',
    server: 'Tokyo, JP',
    plan: 'enterprise',
    speed: '2 –ì–±–∏—Ç/—Å',
    ping: 5,
    monthlyPrice: 18,
    yearlyPrice: 180,
    features: ['–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π IP', 'DDoS –∑–∞—â–∏—Ç–∞', '24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
    rating: 4.7,
    reviewsCount: 89,
    sellerName: 'AsiaVPN Corp',
    uptime: 99.9,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 15
  },
  {
    id: '4',
    name: 'UK Privacy Shield',
    country: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
    countryCode: 'GB',
    flag: 'üá¨üáß',
    server: 'London, UK',
    plan: 'basic',
    speed: '500 –ú–±–∏—Ç/—Å',
    ping: 12,
    monthlyPrice: 8,
    yearlyPrice: 80,
    features: ['BBC iPlayer', '–•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'],
    rating: 4.5,
    reviewsCount: 203,
    sellerName: 'BritVPN Ltd',
    uptime: 99.5,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 3
  },
  {
    id: '5',
    name: 'Canada Secure',
    country: '–ö–∞–Ω–∞–¥–∞',
    countryCode: 'CA',
    flag: 'üá®üá¶',
    server: 'Toronto, CA',
    plan: 'premium',
    speed: '750 –ú–±–∏—Ç/—Å',
    ping: 18,
    monthlyPrice: 11,
    yearlyPrice: 110,
    features: ['–°—Ç—Ä–æ–≥–∏–µ –∑–∞–∫–æ–Ω—ã –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '–ë–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'],
    rating: 4.6,
    reviewsCount: 156,
    sellerName: 'CanadaVPN Inc',
    uptime: 99.7,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 8
  },
  {
    id: '6',
    name: 'Singapore Lightning',
    country: '–°–∏–Ω–≥–∞–ø—É—Ä',
    countryCode: 'SG',
    flag: 'üá∏üá¨',
    server: 'Singapore, SG',
    plan: 'enterprise',
    speed: '1.5 –ì–±–∏—Ç/—Å',
    ping: 3,
    monthlyPrice: 15,
    yearlyPrice: 150,
    features: ['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞', '–ò–≥—Ä–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 'Premium –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
    rating: 4.9,
    reviewsCount: 74,
    sellerName: 'SingVPN Solutions',
    uptime: 99.9,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN', 'IKEv2'],
    logPolicy: 'no-logs',
    simultaneousConnections: 12
  },
  {
    id: '7',
    name: 'Swiss Privacy Pro',
    country: '–®–≤–µ–π—Ü–∞—Ä–∏—è',
    countryCode: 'CH',
    flag: 'üá®üá≠',
    server: 'Zurich, CH',
    plan: 'premium',
    speed: '600 –ú–±–∏—Ç/—Å',
    ping: 10,
    monthlyPrice: 14,
    yearlyPrice: 140,
    features: ['–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'Zero logs'],
    rating: 4.8,
    reviewsCount: 95,
    sellerName: 'SwissVPN AG',
    uptime: 99.8,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 6
  },
  {
    id: '8',
    name: 'Netherlands Speed',
    country: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
    countryCode: 'NL',
    flag: 'üá≥üá±',
    server: 'Amsterdam, NL',
    plan: 'basic',
    speed: '400 –ú–±–∏—Ç/—Å',
    ping: 14,
    monthlyPrice: 7,
    yearlyPrice: 70,
    features: ['–¢–æ—Ä—Ä–µ–Ω—Ç-—Ñ—Ä–µ–Ω–¥–ª–∏', '–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'],
    rating: 4.4,
    reviewsCount: 167,
    sellerName: 'DutchVPN BV',
    uptime: 99.4,
    isOnline: true,
    bandwidth: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ',
    protocols: ['WireGuard', 'OpenVPN'],
    logPolicy: 'no-logs',
    simultaneousConnections: 3
  }
];

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
export async function getVpnOffers(): Promise<VpnOffer[]> {
  await new Promise((resolve) => setTimeout(resolve, 500));
  return [...mockVpnOffers];
}

// Mock-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export async function purchaseVpnOffer(
  offerId: string, 
  plan: 'monthly' | 'yearly' = 'monthly'
): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 2000));
  
  const offer = mockVpnOffers.find(o => o.id === offerId);
  if (!offer) {
    throw new Error('VPN –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  if (!offer.isOnline) {
    throw new Error('VPN —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  const price = plan === 'yearly' ? offer.yearlyPrice : offer.monthlyPrice;
  console.log(`–ü–æ–∫—É–ø–∫–∞ VPN "${offer.name}" (${plan}) –∑–∞ $${price}`);
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  // –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
} 