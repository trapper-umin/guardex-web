import React, { useState } from 'react';
import { mockPurchaseSubscription } from '../services/api';
import { notifications } from '../utils/notifications';

interface SubscriptionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
const subscriptionPlans = [
  { months: 1, label: '1 –º–µ—Å—è—Ü', description: '–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ' },
  { months: 3, label: '3 –º–µ—Å—è—Ü–∞', description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä' },
  { months: 6, label: '6 –º–µ—Å—è—Ü–µ–≤', description: '–í—ã–≥–æ–¥–Ω–æ' },
  { months: 12, label: '1 –≥–æ–¥', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞' },
];

const SubscriptionModal: React.FC<SubscriptionModalProps> = ({ isOpen, onClose, onSuccess }) => {
  const [selectedMonths, setSelectedMonths] = useState(1);
  const [isProcessing, setIsProcessing] = useState(false);

  const pricePerMonth = 125;
  const totalPrice = selectedMonths * pricePerMonth;

  // –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
  const getDiscount = (months: number) => {
    if (months >= 12) return 20; // 20% —Å–∫–∏–¥–∫–∞ –∑–∞ –≥–æ–¥
    if (months >= 6) return 10;  // 10% —Å–∫–∏–¥–∫–∞ –∑–∞ –ø–æ–ª–≥–æ–¥–∞
    if (months >= 3) return 5;   // 5% —Å–∫–∏–¥–∫–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
    return 0;
  };

  const discount = getDiscount(selectedMonths);
  const discountAmount = Math.round((totalPrice * discount) / 100);
  const finalPrice = totalPrice - discountAmount;

  const handlePurchase = async () => {
    try {
      setIsProcessing(true);
      await mockPurchaseSubscription(selectedMonths);
      
      notifications.subscription.paymentSuccess();
      onSuccess();
      onClose();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
      setSelectedMonths(1);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:', error);
      notifications.subscription.paymentError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleClose = () => {
    if (!isProcessing) {
      setSelectedMonths(1);
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 flex items-center justify-center z-50 p-4"
      style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}
    >
      <div className="bg-white rounded-xl shadow-lg p-6 w-full max-w-lg">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold text-gray-900">
            –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
          </h2>
          <button
            onClick={handleClose}
            disabled={isProcessing}
            className="text-gray-400 hover:text-gray-600 disabled:opacity-50"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <p className="text-blue-800 text-sm">
            ‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
          </p>
        </div>

        <div className="mb-6">
          {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ */}
          <div className="grid grid-cols-2 gap-3 mb-6">
            {subscriptionPlans.map((plan) => (
              <button
                key={plan.months}
                onClick={() => setSelectedMonths(plan.months)}
                disabled={isProcessing}
                className={`p-4 rounded-lg border-2 transition-all duration-200 disabled:opacity-50 ${
                  selectedMonths === plan.months
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <div className="text-sm font-medium">{plan.label}</div>
                <div className="text-xs text-gray-500 mt-1">{plan.description}</div>
                {getDiscount(plan.months) > 0 && (
                  <div className="text-xs text-green-600 font-medium mt-1">
                    -{getDiscount(plan.months)}% —Å–∫–∏–¥–∫–∞
                  </div>
                )}
              </button>
            ))}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ */}
          <div className="bg-blue-50 rounded-lg p-4 mb-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü:</span>
              <span className="font-medium">{pricePerMonth} ‚ÇΩ</span>
            </div>
            <div className="flex justify-between items-center mb-2">
              <span className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:</span>
              <span className="font-medium">{selectedMonths}</span>
            </div>
            {discount > 0 && (
              <>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-600">–°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:</span>
                  <span className="line-through text-gray-500">{totalPrice} ‚ÇΩ</span>
                </div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-green-600">–°–∫–∏–¥–∫–∞ ({discount}%):</span>
                  <span className="text-green-600 font-medium">-{discountAmount} ‚ÇΩ</span>
                </div>
              </>
            )}
            <hr className="my-2 border-gray-200" />
            <div className="flex justify-between items-center">
              <span className="text-lg font-semibold text-gray-900">–ò—Ç–æ–≥–æ:</span>
              <span className="text-lg font-bold text-blue-600">{finalPrice} ‚ÇΩ</span>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≥–æ–¥–µ */}
          {selectedMonths >= 6 && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
              <p className="text-green-800 text-sm">
                üéâ {selectedMonths >= 12 ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!' : '–í—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ!'} 
                {discount > 0 && ` –í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ ${discountAmount} ‚ÇΩ`}
              </p>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-3">
          <button
            onClick={handleClose}
            disabled={isProcessing}
            className="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handlePurchase}
            disabled={isProcessing}
            className="flex-1 px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition-colors disabled:cursor-not-allowed flex items-center justify-center"
          >
            {isProcessing ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                –û–±—Ä–∞–±–æ—Ç–∫–∞...
              </>
            ) : (
              `–û–ø–ª–∞—Ç–∏—Ç—å ${finalPrice} ‚ÇΩ`
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SubscriptionModal; 